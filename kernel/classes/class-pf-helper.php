<?php
class PF_Helper{
	public static function pf_get_bigger_bp($breakpoints) {
		foreach ($breakpoints as $bp) {
			if ($bp) {
				return $bp;
			}
		}
	}
	public static function pf_get_smaller_bp($breakpoints) {
		foreach (array_reverse($breakpoints) as $bp) {
			if ($bp) {
				return $bp;
			}
		}
	}

	public static function pf_sanitize_output($buffer) {
		$search = array(
			'/\>[^\S ]+/s', // strip whitespaces after tags, except space
			'/[^\S ]+\</s', // strip whitespaces before tags, except space
			'/(\s)+/s', // shorten multiple whitespace sequences
			'/<!--(.|\s)*?-->/', // Remove HTML comments
		);
		$replace = array(
			'>',
			'<',
			'\\1',
			'',
		);
		return preg_replace($search, $replace, $buffer);
	}

	/**
	 * Get all files generated by pictifly of given attachment id
	 *
	 * @param integer $attachment_id
	 * @return string[] Array string (path to file)
	 */
	public static function pf_get_attachment_master_files($attachment_id) {
		$dir   = self::pf_get_attachment_dir($attachment_id);
		$files = [];
		if (is_dir($dir)) {
			$indir = scandir($dir);
			foreach ($indir as $file) {
				if (is_file($dir . '/' . $file) && $file[0] !== '.') {
					$files[] = $file;
				}
			}
		}
		return $files;
	}

	public static function pf_get_attachment_dir($attachment_id) {
		$attachment_id = pf_get_id_in_default_lang($attachment_id);
		$configs       = pf_configs();
		return $configs['resize_path'] . $attachment_id . '/';
	}
	/**
	 * Remove pictifly attachment dir with file in it like rm -rf command
	 * @see https://stackoverflow.com/a/3352564/2838586
	 * @return void
	 */
	public static function pf_remove_attachment_dir($post_id) {
		$dir = self::pf_get_attachment_dir($post_id);
		self::pf_remove_dir_with_content($dir);
	}

	public static function pf_remove_dir_with_content($dir) {
		if (is_dir($dir)) {
			$files = new RecursiveIteratorIterator(
				new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS),
				RecursiveIteratorIterator::CHILD_FIRST
			);
			foreach ($files as $fileinfo) {
				$todo = ($fileinfo->isDir() ? 'rmdir' : 'unlink');
				$todo($fileinfo->getRealPath());
			}

			rmdir($dir);
		}
	}

	public static function pf_get_folders_in_dir($path) {
		$indir = scandir($path);
		$dirs  = [];

		foreach ($indir as $dirname) {
			$dir = $path . $dirname;
			if (is_dir($dir) && !in_array($dirname, [".", ".."])) {
				$dirs[] = $dir;
			}
		}
		return $dirs;
	}
	public static function default_settings(){
        return [
            'pictifly_quality'    => 100,
            'compression_quality' => 75,
            'lazyload'            => false,
            'imgix_url'           => null,
            'imgix'               => false,
        ];
    }
}
